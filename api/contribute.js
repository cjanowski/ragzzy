/**\n * RagZzy Contribution API - Handles user knowledge contributions\n * Processes user-submitted knowledge and adds it to the knowledge base\n */\n\nconst fs = require('fs');\nconst path = require('path');\nconst { generateEmbedding } = require('./chat');\n\n// Configuration\nconst CONFIG = {\n    minQuestionLength: 5,\n    minAnswerLength: 10,\n    maxAnswerLength: parseInt(process.env.MAX_CONTRIBUTION_LENGTH) || 2000,\n    allowedCategories: ['business-info', 'products', 'pricing', 'policies', 'support', 'other']\n};\n\n/**\n * Main contribution handler\n */\nmodule.exports = async (req, res) => {\n    // Set CORS headers\n    res.setHeader('Access-Control-Allow-Origin', '*');\n    res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');\n    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');\n    \n    if (req.method === 'OPTIONS') {\n        return res.status(200).end();\n    }\n    \n    if (req.method !== 'POST') {\n        return res.status(405).json({ \n            error: 'Method not allowed',\n            code: 'METHOD_NOT_ALLOWED'\n        });\n    }\n    \n    const startTime = Date.now();\n    const requestId = generateRequestId();\n    \n    try {\n        // Validate and parse request\n        const contribution = validateContribution(req.body);\n        \n        if (!contribution.valid) {\n            return res.status(400).json({\n                success: false,\n                message: contribution.error,\n                code: 'VALIDATION_ERROR',\n                requestId\n            });\n        }\n        \n        // Process the contribution\n        const result = await processContribution(contribution.data, requestId);\n        const processingTime = Date.now() - startTime;\n        \n        // Return success response\n        res.status(200).json({\n            ...result,\n            timestamp: Date.now(),\n            processingTime,\n            requestId\n        });\n        \n    } catch (error) {\n        console.error(`[${requestId}] Contribution API error:`, error);\n        \n        const processingTime = Date.now() - startTime;\n        \n        // Handle specific error types\n        if (error.message?.includes('file system')) {\n            return res.status(500).json({\n                success: false,\n                message: 'Unable to save contribution at this time. Please try again.',\n                code: 'STORAGE_ERROR',\n                requestId,\n                processingTime\n            });\n        }\n        \n        if (error.message?.includes('API key') || error.message?.includes('embedding')) {\n            return res.status(500).json({\n                success: false,\n                message: 'Service temporarily unavailable. Your contribution has been saved and will be processed soon.',\n                code: 'SERVICE_ERROR',\n                requestId,\n                processingTime\n            });\n        }\n        \n        // Generic error response\n        res.status(500).json({\n            success: false,\n            message: 'Something went wrong while processing your contribution. Please try again.',\n            code: 'INTERNAL_ERROR',\n            requestId,\n            processingTime\n        });\n    }\n};\n\n/**\n * Validate contribution data\n */\nfunction validateContribution(data) {\n    if (!data || typeof data !== 'object') {\n        return {\n            valid: false,\n            error: 'Invalid contribution data'\n        };\n    }\n    \n    const { question, answer, category, confidence, source } = data;\n    \n    // Validate question\n    if (!question || typeof question !== 'string') {\n        return {\n            valid: false,\n            error: 'Question is required'\n        };\n    }\n    \n    if (question.trim().length < CONFIG.minQuestionLength) {\n        return {\n            valid: false,\n            error: `Question must be at least ${CONFIG.minQuestionLength} characters long`\n        };\n    }\n    \n    if (question.length > 500) {\n        return {\n            valid: false,\n            error: 'Question is too long (maximum 500 characters)'\n        };\n    }\n    \n    // Validate answer\n    if (!answer || typeof answer !== 'string') {\n        return {\n            valid: false,\n            error: 'Answer is required'\n        };\n    }\n    \n    if (answer.trim().length < CONFIG.minAnswerLength) {\n        return {\n            valid: false,\n            error: `Answer must be at least ${CONFIG.minAnswerLength} characters long`\n        };\n    }\n    \n    if (answer.length > CONFIG.maxAnswerLength) {\n        return {\n            valid: false,\n            error: `Answer is too long (maximum ${CONFIG.maxAnswerLength} characters)`\n        };\n    }\n    \n    // Validate category (optional)\n    if (category && !CONFIG.allowedCategories.includes(category)) {\n        return {\n            valid: false,\n            error: 'Invalid category'\n        };\n    }\n    \n    // Validate confidence (optional)\n    if (confidence !== undefined) {\n        const conf = parseInt(confidence);\n        if (isNaN(conf) || conf < 1 || conf > 5) {\n            return {\n                valid: false,\n                error: 'Confidence must be a number between 1 and 5'\n            };\n        }\n    }\n    \n    // Check for spam/inappropriate content\n    if (isInappropriateContent(question + ' ' + answer)) {\n        return {\n            valid: false,\n            error: 'Content appears to be inappropriate or spam'\n        };\n    }\n    \n    return {\n        valid: true,\n        data: {\n            question: question.trim(),\n            answer: answer.trim(),\n            category: category || 'other',\n            confidence: parseInt(confidence) || 4,\n            source: source || 'user'\n        }\n    };\n}\n\n/**\n * Process the validated contribution\n */\nasync function processContribution(contribution, requestId) {\n    try {\n        // Save contribution to knowledge base file\n        await saveToKnowledgeBase(contribution, requestId);\n        \n        // Generate follow-up suggestions\n        const suggestedPrompts = generateFollowUpPrompts(contribution);\n        const relatedTopics = findRelatedTopics(contribution.category);\n        \n        // Log the contribution for analytics\n        logContribution(contribution, requestId);\n        \n        return {\n            success: true,\n            message: getThankYouMessage(contribution.category),\n            suggestedPrompts: suggestedPrompts,\n            relatedTopics: relatedTopics,\n            contribution: {\n                category: contribution.category,\n                confidence: contribution.confidence,\n                wordCount: contribution.answer.split(' ').length\n            }\n        };\n        \n    } catch (error) {\n        console.error(`[${requestId}] Error processing contribution:`, error);\n        throw error;\n    }\n}\n\n/**\n * Save contribution to knowledge base file\n */\nasync function saveToKnowledgeBase(contribution, requestId) {\n    try {\n        const knowledgeBasePath = path.join(process.cwd(), 'knowledge_base.txt');\n        \n        // Format the contribution\n        const timestamp = new Date().toISOString();\n        const formattedContribution = `\\n\\n${contribution.question}\\n${contribution.answer}\\n\\n# User contribution - ${timestamp} - Category: ${contribution.category} - Confidence: ${contribution.confidence}/5`;\n        \n        // Append to knowledge base file\n        await fs.promises.appendFile(knowledgeBasePath, formattedContribution, 'utf8');\n        \n        console.log(`[${requestId}] Contribution saved to knowledge base`);\n        \n    } catch (error) {\n        console.error(`[${requestId}] Error saving to knowledge base:`, error);\n        throw new Error('file system error');\n    }\n}\n\n/**\n * Generate follow-up prompts based on the contribution\n */\nfunction generateFollowUpPrompts(contribution) {\n    const allPrompts = {\n        'business-info': [\n            {\n                id: 'location',\n                question: 'Where are you located?',\n                category: 'business-info'\n            },\n            {\n                id: 'team-size',\n                question: 'How many people work at your company?',\n                category: 'business-info'\n            },\n            {\n                id: 'founded',\n                question: 'When was your company founded?',\n                category: 'business-info'\n            }\n        ],\n        'products': [\n            {\n                id: 'features',\n                question: 'What are the key features of your main product?',\n                category: 'products'\n            },\n            {\n                id: 'target-audience',\n                question: 'Who is your target audience?',\n                category: 'products'\n            },\n            {\n                id: 'competitors',\n                question: 'How do you differ from competitors?',\n                category: 'products'\n            }\n        ],\n        'pricing': [\n            {\n                id: 'payment-methods',\n                question: 'What payment methods do you accept?',\n                category: 'pricing'\n            },\n            {\n                id: 'discounts',\n                question: 'Do you offer any discounts or promotions?',\n                category: 'pricing'\n            },\n            {\n                id: 'billing',\n                question: 'How does billing work?',\n                category: 'pricing'\n            }\n        ],\n        'policies': [\n            {\n                id: 'privacy',\n                question: 'What is your privacy policy?',\n                category: 'policies'\n            },\n            {\n                id: 'terms',\n                question: 'What are your terms of service?',\n                category: 'policies'\n            },\n            {\n                id: 'warranty',\n                question: 'What warranty do you provide?',\n                category: 'policies'\n            }\n        ],\n        'support': [\n            {\n                id: 'response-time',\n                question: 'How quickly do you respond to support requests?',\n                category: 'support'\n            },\n            {\n                id: 'troubleshooting',\n                question: 'How can users troubleshoot common issues?',\n                category: 'support'\n            },\n            {\n                id: 'documentation',\n                question: 'Where can users find documentation?',\n                category: 'support'\n            }\n        ],\n        'other': [\n            {\n                id: 'general-1',\n                question: 'What are your business hours?',\n                category: 'business-info'\n            },\n            {\n                id: 'general-2',\n                question: 'How can customers contact you?',\n                category: 'business-info'\n            },\n            {\n                id: 'general-3',\n                question: 'What makes your service unique?',\n                category: 'products'\n            }\n        ]\n    };\n    \n    const categoryPrompts = allPrompts[contribution.category] || allPrompts['other'];\n    \n    // Return 2-3 random prompts from the category\n    const shuffled = categoryPrompts.sort(() => 0.5 - Math.random());\n    return shuffled.slice(0, Math.min(3, shuffled.length));\n}\n\n/**\n * Find related topics based on category\n */\nfunction findRelatedTopics(category) {\n    const relatedTopics = {\n        'business-info': ['Contact Information', 'Company Background', 'Office Locations', 'Team'],\n        'products': ['Features', 'Use Cases', 'Integrations', 'Roadmap'],\n        'pricing': ['Plans', 'Payment', 'Billing', 'Discounts'],\n        'policies': ['Terms of Service', 'Privacy Policy', 'Refunds', 'Warranties'],\n        'support': ['Help Center', 'Tutorials', 'Troubleshooting', 'Community'],\n        'other': ['General Information', 'Getting Started', 'Best Practices']\n    };\n    \n    return relatedTopics[category] || relatedTopics['other'];\n}\n\n/**\n * Get a personalized thank you message\n */\nfunction getThankYouMessage(category) {\n    const messages = {\n        'business-info': 'Thank you for helping others learn more about the company!',\n        'products': 'Great! Your product knowledge will help many users.',\n        'pricing': 'Thanks for clarifying pricing information - very helpful!',\n        'policies': 'Excellent! Policy information is crucial for users.',\n        'support': 'Thank you for sharing support knowledge!',\n        'other': 'Thank you for your valuable contribution!'\n    };\n    \n    return messages[category] || messages['other'];\n}\n\n/**\n * Log contribution for analytics\n */\nfunction logContribution(contribution, requestId) {\n    const logEntry = {\n        timestamp: new Date().toISOString(),\n        requestId,\n        category: contribution.category,\n        confidence: contribution.confidence,\n        questionLength: contribution.question.length,\n        answerLength: contribution.answer.length,\n        source: contribution.source\n    };\n    \n    // In a production system, this would go to a proper logging service\n    console.log('Contribution logged:', JSON.stringify(logEntry));\n}\n\n/**\n * Check for inappropriate content\n */\nfunction isInappropriateContent(text) {\n    const inappropriatePatterns = [\n        /\\b(spam|viagra|casino|porn|xxx)\\b/i,\n        /\\b(buy now|click here|free money|get rich quick)\\b/i,\n        /\\b(f[u*]ck|sh[i*]t|d[a*]mn|b[i*]tch)\\b/i,\n        /\\b(\\w)\\1{5,}/g, // Excessive repeated characters\n        /^.{0,10}$/g, // Very short responses that are likely spam\n    ];\n    \n    // Check for excessive caps (more than 70% uppercase)\n    const uppercaseRatio = (text.match(/[A-Z]/g) || []).length / text.length;\n    if (uppercaseRatio > 0.7 && text.length > 20) {\n        return true;\n    }\n    \n    // Check for excessive punctuation\n    const punctuationRatio = (text.match(/[!?]{3,}/g) || []).length;\n    if (punctuationRatio > 2) {\n        return true;\n    }\n    \n    return inappropriatePatterns.some(pattern => pattern.test(text));\n}\n\n/**\n * Generate a unique request ID\n */\nfunction generateRequestId() {\n    return 'contrib_' + Math.random().toString(36).substr(2, 9) + '_' + Date.now();\n}\n\n/**\n * Health check endpoint for contribution service\n */\nmodule.exports.healthCheck = () => {\n    return {\n        status: 'healthy',\n        timestamp: new Date().toISOString(),\n        config: {\n            minQuestionLength: CONFIG.minQuestionLength,\n            minAnswerLength: CONFIG.minAnswerLength,\n            maxAnswerLength: CONFIG.maxAnswerLength,\n            allowedCategories: CONFIG.allowedCategories\n        }\n    };\n};"